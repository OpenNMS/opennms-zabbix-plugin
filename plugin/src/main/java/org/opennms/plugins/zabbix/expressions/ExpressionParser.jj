PARSER_BEGIN(ExpressionParser)

package org.opennms.plugins.zabbix.expressions;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

public class ExpressionParser extends ExpressionParserBase {

    public ExpressionParser() {
        this(new StringReader(""));
    }
}

PARSER_END(ExpressionParser)

// Skip whitespace characters
SKIP : {
  " "
| "\t"
| "\r"
| "\n"
| "\r\n"
}

TOKEN : {
  <AND: ("AND" | "and" | "&&") >
| <OR: ("OR" | "or" | "||") >
| <LPAREN: "(" >
| <RPAREN: ")" >
}

TOKEN : {
  <OPERATOR: (<MINUS>|<MULTIPLICATION>|<DIVISION>|<PLUS>|<LESS_THAN>|<LESS_THAN_OR_EQUAL>|<MORE_THAN>|<MORE_THAN_OR_EQUAL>|<EQUAL>|<NOT_EQUAL>) >
| <MINUS: "-" >
| <NOT: "not" >
| <MULTIPLICATION: "*" >
| <DIVISION: "/" >
| <PLUS: "+" >
| <LESS_THAN: "<" >
| <LESS_THAN_OR_EQUAL: "<=" >
| <MORE_THAN: ">" >
| <MORE_THAN_OR_EQUAL: ">=" >
| <EQUAL: "=" >
| <NOT_EQUAL: "<>" >
| <MACRO: "{" (["a"-"z","A"-"Z",".","0"-"9",",","[","{","#","}","]","\"",":","$"])+ "}"  >
| <NUMBER: (["0"-"9","."])+  >
| <NUMBER_WITH_UNIT: <NUMBER>(["a"-"z"])+  >
| <FUNCTION_CALL: ["a"-"z"](["a"-"z","0"-"9"])+>
| <HOST_AND_KEY: "/" (["a"-"z","A"-"Z","0"-"9"," "])+ "/" (["a"-"z","A"-"Z","0"-"9","[","{","#","}","]","."])+ >
}

/** Main production. */
Expression TopLevelExpression() : {
 Expression e;
}
{
  e=Expression() <EOF>
  { return e; }
}

Term FunctionParameter() : {
   Token body;
   Expression e;
}
{
  e=Expression(){return e;}|body=<HOST_AND_KEY>{return new Constant(body.image);}|body=<NUMBER>{return new Constant(body.image);}|body=<NUMBER_WITH_UNIT>{return new Constant(body.image);}
}

Expression Expression() : {
  List<Term> parameters = new ArrayList<>();
  Token function = null, op = null, body = null, constant = null;
  Term p;
  Expression e;
}
{
  function=<FUNCTION_CALL>
  <LPAREN>
  p=FunctionParameter(){parameters.add(p);} ("," p=FunctionParameter(){parameters.add(p);})*
  <RPAREN>
  op=<OPERATOR>
  (constant=<NUMBER>|constant=<MACRO>)
  { e = new Expression(new FunctionCall(function.image, parameters), op.image, new Constant(constant.image)); }
  { return e; }
}
