PARSER_BEGIN(ItemParser)

package org.opennms.plugins.zabbix.items;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.opennms.plugins.zabbix.expressions.ItemKey;
import org.opennms.plugins.zabbix.expressions.Term;
import org.opennms.plugins.zabbix.expressions.Constant;
import org.opennms.plugins.zabbix.expressions.Array;
import org.opennms.plugins.zabbix.expressions.HostAndKey;

public class ItemParser extends ItemParserBase {

    public ItemParser() {
        this(new StringReader(""));
    }
}

PARSER_END(ItemParser)

// Skip whitespace characters
SKIP : {
  " "
| "\t"
| "\r"
| "\n"
| "\r\n"
}

TOKEN : {
    < NAME: (["0"-"9","a"-"z","A"-"Z","_","-","."])+ >
  | < LSQUARE: "[" > : IN_KEY_PARM
  | < FORWARD_SLASH: "/" > : IN_HOST
}

<IN_HOST> TOKEN: {
    < HOST: (["0"-"9","a"-"z","A"-"Z","_","-","."," "])+ >
  | < HOST_KEY_SEPARATOR: "/" > : DEFAULT
}

<IN_KEY_PARM> TOKEN: {
   < ARRAY_PARM_START: "[" > : IN_ARRAY
 | <QUOTED:
       "\""
       (
           "\\" ~[]    //any escaped character
           |           //or
           ~["\""]      //any non-quote character
       )*
       "\""
   >
   // [ and " are be allowed in parameter values, provided they don't start
 | < ANYTHING : (~["[", ",", "]", "\""])(~[",", "]"])* >
 | < COMMA: "," >
 | < RSQUARE: "]" > : DEFAULT
}

<IN_ARRAY> TOKEN: {
   < COMMA_ARRAY: "," >
 | < ARRAY_PARM_END: "]" > : IN_KEY_PARM
 | < ANYTHING_ARRAY : (~[",", "]"])+ >
}

Array Array() : {
  List<Term> parameters = new LinkedList<>();
  Token p;
} {
 <ARRAY_PARM_START>
 // the first parameter
 {p=null;}(p=<ANYTHING_ARRAY>{parameters.add(new Constant(p.image));})?{if(p==null){parameters.add(new Constant(""));}}
 // subsequent parameters
 (<COMMA_ARRAY> {p=null;}(p=<ANYTHING_ARRAY>{parameters.add(new Constant(p.image));})?{if(p==null){parameters.add(new Constant(""));}})*
 <ARRAY_PARM_END>
 { return new Array(parameters); }
}

Term KeyParameter() : {
  Array a;
  Constant c;
  Token p;
} {
  // the parameter can be an array
  (a=Array(){ return a; }) |
  // a quoted string
  (p=<QUOTED>{ return new Constant(p.image); }) |
  // some some other constant
  (p=<ANYTHING>{ return new Constant(p.image); })
}

ItemKey Item() : {
 List<Term> parameters = new LinkedList<>();
 Term p;
 Token name;
}
{
  name=<NAME> (
    <LSQUARE>
    // the first parameter
    {p=null;}(p=KeyParameter(){parameters.add(p);})?{if(p==null){parameters.add(new Constant(""));}}
    // subsequent parameters
    (<COMMA> {p=null;}(p=KeyParameter(){parameters.add(p);})?{if(p==null){parameters.add(new Constant(""));}})*
    <RSQUARE>
  )?
  { return new ItemKey(name.image, parameters); }
}

/** Main production. */
ItemKey TopLevelItem() : {
 ItemKey item;
}
{
  item=Item() <EOF>
  { return item; }
}

HostAndKey TopLevelHostAndKey() : {
 Token host;
 ItemKey item;
}
{
  <FORWARD_SLASH>
  host=<HOST>
  <HOST_KEY_SEPARATOR>
  item=Item()
  <EOF>
  { return new HostAndKey(host.image, item); }
}
